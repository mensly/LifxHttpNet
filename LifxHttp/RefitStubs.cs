﻿using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Linq;
using Refit;
using System.Text;
using System.Threading.Tasks;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

namespace RefitInternalGenerated
{
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {
#pragma warning disable 0649
        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
#pragma warning restore 0649
    }
}

namespace LifxHttp
{
    using RefitInternalGenerated;

    [Preserve]
    public partial class AutoGeneratedILifxApi : ILifxApi
    {
        public HttpClient Client { get; protected set; }
        readonly Dictionary<string, Func<HttpClient, object[], object>> methodImpls;

        public AutoGeneratedILifxApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            methodImpls = requestBuilder.InterfaceHttpMethods.ToDictionary(k => k, v => requestBuilder.BuildRestResultFuncForMethod(v));
            Client = client;
        }

        public virtual Task<List<Light>> ListLights(string auth,string selector)
        {
            var arguments = new object[] { auth,selector };
            return (Task<List<Light>>) methodImpls["ListLights"](Client, arguments);
        }

        public virtual Task<List<Scene>> ListScenes(string auth)
        {
            var arguments = new object[] { auth };
            return (Task<List<Scene>>) methodImpls["ListScenes"](Client, arguments);
        }

        public virtual Task<LifxColor.HSBK> ValidateColor(string auth,string colorName)
        {
            var arguments = new object[] { auth,colorName };
            return (Task<LifxColor.HSBK>) methodImpls["ValidateColor"](Client, arguments);
        }

        public virtual Task<ApiResults> SetState(string auth,string selector,string args)
        {
            var arguments = new object[] { auth,selector,args };
            return (Task<ApiResults>) methodImpls["SetState"](Client, arguments);
        }

        public virtual Task<ApiResults> SetStates(string auth,LifxClient.SetStatesSpec args)
        {
            var arguments = new object[] { auth,args };
            return (Task<ApiResults>) methodImpls["SetStates"](Client, arguments);
        }

        public virtual Task<ApiResults> ActivateScene(string auth,string sceneUUID,string args)
        {
            var arguments = new object[] { auth,sceneUUID,args };
            return (Task<ApiResults>) methodImpls["ActivateScene"](Client, arguments);
        }

        public virtual Task<ApiResults> TogglePower(string auth,string selector,string args)
        {
            var arguments = new object[] { auth,selector,args };
            return (Task<ApiResults>) methodImpls["TogglePower"](Client, arguments);
        }

        public virtual Task<ApiResults> PulseEffect(string auth,string selector,string args)
        {
            var arguments = new object[] { auth,selector,args };
            return (Task<ApiResults>) methodImpls["PulseEffect"](Client, arguments);
        }

        public virtual Task<ApiResults> BreatheEffect(string auth,string selector,string args)
        {
            var arguments = new object[] { auth,selector,args };
            return (Task<ApiResults>) methodImpls["BreatheEffect"](Client, arguments);
        }

        public virtual Task<ApiResults> Cycle(string auth,string selector,LifxClient.SetStateSpec args)
        {
            var arguments = new object[] { auth,selector,args };
            return (Task<ApiResults>) methodImpls["Cycle"](Client, arguments);
        }

    }
}


